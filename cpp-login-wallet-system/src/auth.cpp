#include <iostream>
#include <fstream>
#include <ctime>
#include <cstdlib>
#include "../include/Auth.h"
#include <filesystem>
#include <algorithm>
#include <string>
#include <cctype>

bool Auth::userExists(const std::string& username) {
    std::ifstream file("data/users/" + username + ".txt");
    return file.good();
}

std::string Auth::hashPassword(const std::string& password) {
    std::string hashed = password;
    for (char& c : hashed) {
        c = c + 1;
    }
    return hashed;
}

std::string Auth::generateOTP() {
    srand(static_cast<unsigned int>(time(nullptr)));
    std::string otp = "";
    for (int i = 0; i < 6; i++) {
        otp += std::to_string(rand() % 10);
    }
    return otp;
}

bool Auth::verifyOTP(const std::string& otp) {
    std::string inputOTP;
    std::cout << "Nhap OTP: ";
    std::cin >> inputOTP;
    return inputOTP == otp;
}

std::string Auth::generateStrongPassword() {
    const std::string upper_cases = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    const std::string lower_cases = "abcdefghijklmnopqrstuvwxyz";
    const std::string digits = "0123456789";
    const std::string special_chars = "!@#$%^&*()-_=+[]{}|;:',.<>/?";
    const std::string all_chars = upper_cases + lower_cases + digits + special_chars;

    // Đảm bảo mật khẩu có ít nhất 1 ký tự từ mỗi loại
    std::string password = "";
    password += upper_cases[rand() % upper_cases.length()];
    password += lower_cases[rand() % lower_cases.length()];
    password += digits[rand() % digits.length()];
    password += special_chars[rand() % special_chars.length()];

    // Sinh thêm các ký tự ngẫu nhiên cho đủ độ dài (ví dụ: 8-12 ký tự)
    int remaining_length = 8 + (rand() % 5) - 4; // Độ dài từ 8 đến 12
    for (int i = 0; i < remaining_length; ++i) {
        password += all_chars[rand() % all_chars.length()];
    }

    // Trộn ngẫu nhiên các ký tự trong mật khẩu
    std::random_shuffle(password.begin(), password.end());

    return password;
}

void Auth::saveUserData(const std::string& username, const std::string& hashedPassword, const UserInfo& info) {
    std::ofstream file("data/users/" + username + ".txt");
    if (file.is_open()) {
        file << hashedPassword << "\n";
        file << info.fullName << "\n";
        file << info.email << "\n";
        file << static_cast<int>(info.role) << "\n";
        file << (info.isActive ? 1 : 0) << "\n";
        file << info.isAutoGeneratedPassword << "\n";
        file.close();
    }
    else {
        std::cerr << "Loi: Khong the mo file luu du lieu nguoi dung " << username << ".\n";
    }
}

bool Auth::loadUserData(const std::string& username, std::string& hashedPassword, UserInfo& info) {
    std::ifstream file("data/users/" + username + ".txt");
    if (!file.is_open()) return false;

    int roleInt;
    int activeInt;

    std::getline(file, hashedPassword);
    std::getline(file, info.fullName);
    std::getline(file, info.email);
    file >> roleInt;
    file >> activeInt;

    info.role = static_cast<Role>(roleInt);
    info.isActive = (activeInt == 1);
    file >> info.isAutoGeneratedPassword;
    info.username = username;

    return true;
}

bool Auth::registerUser() {
    std::string username, password, fullName, email;
    UserInfo newUser; // <-- DI CHUYỂN DÒNG NÀY LÊN ĐÂY

    std::cout << "Nhap username: ";
    std::cin >> username;
    std::cin.ignore(); // Thêm dòng này để xóa bộ đệm sau khi nhập username

    if (userExists(username)) {
        std::cout << "Tai khoan da ton tai!\n";
        return false;
    }

    char choice_auto_pass;
    std::cout << "Ban co muon he thong tu dong sinh mat khau? (y/n): ";
    std::cin >> choice_auto_pass;
    std::cin.ignore(); // Thêm dòng này để xóa bộ đệm sau khi nhập lựa chọn

    if (tolower(choice_auto_pass) == 'y') { // Nếu người dùng chọn 'y'
        password = generateStrongPassword(); // Gọi hàm tự sinh mật khẩu
        newUser.isAutoGeneratedPassword = true; // Đánh dấu là mật khẩu tự sinh
        std::cout << "Mat khau tu sinh cua ban la: " << password << "\n";
        std::cout << "Vui long ghi lai mat khau nay va doi ngay sau khi dang nhap.\n";
    } else { // Nếu người dùng chọn 'n' hoặc khác
        std::cout << "Nhap mat khau: ";
        std::cin >> password;
        std::cin.ignore(); // Thêm dòng này để xóa bộ đệm sau khi nhập mật khẩu
        newUser.isAutoGeneratedPassword = false; // Đánh dấu là mật khẩu do người dùng nhập
    }

    std::cout << "Nhap ho va ten: ";
    // std::cin.ignore(); // Dòng này có thể bị trùng nếu đã dùng std::cin.ignore() ở trên
    std::getline(std::cin, fullName);

    std::cout << "Nhap email: ";
    std::getline(std::cin, email);

    // newUser; // <--- XÓA DÒNG NÀY Ở ĐÂY (vì đã khai báo ở trên)
    newUser.username = username;
    newUser.fullName = fullName;
    newUser.email = email;
    newUser.role = Role::User;
    newUser.isActive = false;

    std::string otp = generateOTP();
    std::cout << "Ma OTP kich hoat la: " << otp << std::endl;
    if (!verifyOTP(otp)) {
        std::cout << "OTP khong dung, dang ky that bai.\n";
        return false;
    }

    newUser.isActive = true;

    // Tạo thư mục cần thiết nếu chưa có
    std::filesystem::create_directories("data/users");
    std::filesystem::create_directories("data/wallets");
    std::filesystem::create_directories("data/history");

    saveUserData(username, hashPassword(password), newUser);

    std::ofstream wallet("data/wallets/" + username + ".txt");
    wallet << 1000;
    wallet.close();

    std::cout << "Dang ky thanh cong va tai khoan da kich hoat.\n";
    return true;
}

bool Auth::activateAccount() {
    std::string username;
    std::cout << "Nhap username: ";
    std::cin >> username;

    if (!userExists(username)) {
        std::cout << "Tai khoan khong ton tai!\n";
        return false;
    }

    std::string hashedPassword;
    UserInfo info;
    if (!loadUserData(username, hashedPassword, info)) {
        std::cout << "Loi doc du lieu user.\n";
        return false;
    }

    if (info.isActive) {
        std::cout << "Tai khoan da kich hoat truoc do.\n";
        return true;
    }

    std::string otp = generateOTP();
    std::cout << "Ma OTP kich hoat la: " << otp << std::endl;
    if (!verifyOTP(otp)) {
        std::cout << "OTP khong dung, kich hoat that bai.\n";
        return false;
    }

    info.isActive = true;
    saveUserData(username, hashedPassword, info);
    std::cout << "Kich hoat tai khoan thanh cong.\n";
    return true;
}

bool Auth::loginUser() {
    std::string username, password;
    
    std::cout << "Nhap username: ";
    std::cin >> username;
    std::cin.ignore(); // Thêm dòng này để xử lý ký tự xuống dòng

    if (!userExists(username)) {
        std::cout << "Tai khoan khong ton tai!\n";
        return false;
    }

    std::string storedHashedPassword;
    UserInfo info; // Đây là biến cục bộ để tải dữ liệu từ file
    if (!loadUserData(username, storedHashedPassword, info)) {
        std::cout << "Loi doc du lieu user.\n";
        return false;
    }

    if (!info.isActive) {
        std::cout << "Tai khoan chua kich hoat, vui long kich hoat truoc.\n";
        return false;
    }

    std::cout << "Nhap mat khau: ";
    std::cin >> password;
    std::cin.ignore(); // Thêm dòng này để xử lý ký tự xuống dòng

    if (hashPassword(password) == storedHashedPassword) {
        std::cout << "Dang nhap thanh cong!\n";
        
        // Cập nhật biến static currentLoggedInUser toàn cục của class Auth
        Auth::currentLoggedInUser = info; 

        // --- BẮT ĐẦU ĐOẠN CODE KIỂM TRA MẬT KHẨU TỰ SINH ---
        if (Auth::currentLoggedInUser.isAutoGeneratedPassword) { // Sử dụng Auth::currentLoggedInUser
            std::cout << "Ban dang su dung mat khau tu dong sinh. Vui long doi mat khau de tang cuong bao mat.\n";
            
            // Gọi hàm đổi mật khẩu. Hàm changePassword sẽ tự xử lý việc load lại username và password.
            if (Auth::changePassword()) { // Nếu đổi mật khẩu thành công
                // Tải lại dữ liệu người dùng để cập nhật thông tin user và mật khẩu đã hash mới nhất
                // Gọi loadUserData với username của người dùng đang đăng nhập
                std::string newHashedPasswordAfterChange; // Biến tạm để lưu mật khẩu đã hash mới
                if (loadUserData(Auth::currentLoggedInUser.username, newHashedPasswordAfterChange, Auth::currentLoggedInUser)) {
                    // currentLoggedInUser đã được cập nhật với isAutoGeneratedPassword = false
                    // và mật khẩu mới từ file.
                    std::cout << "Mat khau da duoc doi va trang thai mat khau tu sinh da duoc cap nhat.\n";
                } else {
                    std::cerr << "Loi: Khong the tai lai thong tin nguoi dung sau khi doi mat khau sau khi tu dong sinh.\n";
                }
            } else {
                std::cout << "Loi khi doi mat khau tu dong sinh. Vui long thu lai hoac lien he quan tri vien.\n";
                // Tùy chọn: có thể yêu cầu họ đổi lại hoặc không cho phép làm gì khác
                // Hiện tại, vẫn cho phép đăng nhập nhưng sẽ nhắc lại lần sau nếu không đổi.
            }
        }
        // --- KẾT THÚC ĐOẠN CODE KIỂM TRA MẬT KHẨU TỰ SINH ---

        return true; // Cuối cùng mới trả về true sau khi đã xử lý xong logic mật khẩu tự sinh
    } else {
        std::cout << "Mat khau sai!\n";
        return false;
    }
}

bool Auth::changePassword() {
    std::string username;
    std::cout << "Nhap username: ";
    std::cin >> username;

    if (!userExists(username)) {
        std::cout << "Tai khoan khong ton tai!\n";
        return false;
    }

    std::string storedHashedPassword;
    UserInfo info;
    if (!loadUserData(username, storedHashedPassword, info)) {
        std::cout << "Loi doc du lieu user.\n";
        return false;
    }

    std::string otp = generateOTP();
    std::cout << "Ma OTP doi mat khau la: " << otp << std::endl;
    if (!verifyOTP(otp)) {
        std::cout << "OTP khong dung, doi mat khau that bai.\n";
        return false;
    }

    std::string newPassword;
    std::cout << "Nhap mat khau moi: ";
    std::cin >> newPassword;

    info.isAutoGeneratedPassword = false;
    saveUserData(username, hashPassword(newPassword), info);
    std::cout << "Doi mat khau thanh cong.\n";
    return true;
}

bool Auth::transferPoints(const std::string& fromUser) {
    std::string toUser;
    int amount;

    std::cout << "Nhap ten nguoi nhan: ";
    std::cin >> toUser;
    std::cout << "Nhap so diem muon chuyen: ";
    std::cin >> amount;

    if (!userExists(toUser)) {
        std::cout << "Nguoi nhan khong ton tai.\n";
        return false;
    }

    std::string otp = generateOTP();
    std::cout << "Ma OTP xac nhan giao dich la: " << otp << std::endl; 
    
    if (!verifyOTP(otp)) {
        std::cout << "OTP khong dung, giao dich that bai.\n";
        return false;
    }

    std::string fromPath = "data/wallets/" + fromUser + ".txt";
    std::string toPath = "data/wallets/" + toUser + ".txt";

    int fromBalance = 0, toBalance = 0;
    std::ifstream finFrom(fromPath);
    if (finFrom.is_open()) {
        finFrom >> fromBalance;
        finFrom.close();
    }

    if (fromBalance < amount) {
        std::cout << "So du khong du.\n";
        return false;
    }

    std::ifstream finTo(toPath);
    if (finTo.is_open()) {
        finTo >> toBalance;
        finTo.close();
    }

    fromBalance -= amount;
    toBalance += amount;

    std::ofstream foutFrom(fromPath);
    foutFrom << fromBalance;
    foutFrom.close();

    std::ofstream foutTo(toPath);
    foutTo << toBalance;
    foutTo.close();

    std::ofstream hFrom("data/history/" + fromUser + ".txt", std::ios::app);
    std::ofstream hTo("data/history/" + toUser + ".txt", std::ios::app);
    std::string timeStr = std::to_string(time(nullptr));

    hFrom << "Chuyen " << amount << " diem cho " << toUser << " vao luc " << timeStr << "\n";
    hTo << "Nhan " << amount << " diem tu " << fromUser << " vao luc " << timeStr << "\n";

    hFrom.close();
    hTo.close();

    std::cout << "Chuyen thanh cong.\n";
    return true;
}

void Auth::viewTransactionHistory(const std::string& username) {
    std::ifstream file("data/history/" + username + ".txt");
    if (!file.is_open()) {
        std::cout << "Khong co lich su giao dich.\n";
        return;
    }

    std::string line;
    while (std::getline(file, line)) {
        std::cout << line << "\n";
    }
    file.close();
}
void Auth::viewBalance(const std::string& username) {
    std::ifstream walletFile("data/wallets/" + username + ".txt");
    if (!walletFile.is_open()) {
        std::cout << "Khong tim thay vi cua ban.\n";
        return;
    }

    int balance = 0;
    walletFile >> balance;
    walletFile.close();

    std::cout << "So du hien tai cua ban la: " << balance << " diem.\n";
}
UserInfo Auth::currentLoggedInUser;